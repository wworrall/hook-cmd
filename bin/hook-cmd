#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_http_1 = __importDefault(require("node:http"));
const node_child_process_1 = require("node:child_process");
const getCmdAndOptions = (hook) => hookCmds.find((hookCmd) => hookCmd.hook === hook);
const app = node_http_1.default.createServer((req, res) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    const hook = (_a = req.url) === null || _a === void 0 ? void 0 : _a.slice(1);
    const hookCmd = getCmdAndOptions(hook);
    let statusCode;
    let data;
    if (!hookCmd) {
        statusCode = 400;
        data = { message: "Bad request." };
    }
    else {
        statusCode = 202;
        data = { message: "Hook received. Executing command." };
    }
    res.writeHead(statusCode, { "Content-Type": "application/json" });
    res.write(JSON.stringify(data));
    res.end();
    if (!hookCmd)
        return;
    if ((_b = hookCmd.args) === null || _b === void 0 ? void 0 : _b.length) {
        (0, node_child_process_1.spawn)(hookCmd.cmd, hookCmd.args, {
            stdio: ["pipe", process.stdout, process.stderr],
        });
    }
    else {
        (0, node_child_process_1.spawn)(hookCmd.cmd, {
            stdio: ["pipe", process.stdout, process.stderr],
        });
    }
}));
// 0 is node, 1 is current script, 2 is config file passed in as stdin first
// argument
const configStr = process.argv[2];
const config = JSON.parse(configStr);
const port = config.port || 5000;
const { hookCmds } = config;
app.listen(port, () => {
    console.log(`Server listening on port ${port}`);
});
